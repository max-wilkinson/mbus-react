{"version":3,"sources":["assets/accentBars.svg","services/LocationService.ts","components/card/route/RouteDetails.tsx","components/card/Card.tsx","components/cardList/CardList.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LocationService","stops","this","getUserLocation","location","sortStopsByDistance","getPosition","position","coords","options","enableHighAccuracy","timeout","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","stop","distance","calculateDistance","sort","a","b","undefined","lat","latitude","lon","longitude","Math","sqrt","pow","RouteDetails","props","className","routeId","routes","route","id","name","getRouteName","Object","values","etasByRoute","map","eta","i","key","ETAROUTES","gql","Card","useState","setEtasByRoute","useQuery","variables","Number","loading","error","data","useEffect","combinedEtas","etas","push","avg","keys","STOPS","CardList","nearbyStops","setNearbyStops","locationService","determineNearbyStops","activeStops","slice","client","ApolloClient","uri","App","src","accentBars","alt","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9d807c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/accentBars.50ec595e.svg\";","import Stop from '../models/Stop';\n\nexport class LocationService {\n  public async determineNearbyStops(stops: Stop[]): Promise<Stop[]> {\n    const location: Coordinates = await this.getUserLocation();\n    return this.sortStopsByDistance(location, stops);\n  }\n\n  private async getUserLocation(): Promise<Coordinates> {\n    const position: Position = await this.getPosition();\n    return position.coords;\n  }\n\n  private getPosition(): Promise<Position> {\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 7000\n    };\n\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  }\n\n  private sortStopsByDistance(location: Coordinates, stops: Stop[]): Stop[] {\n    for (const stop of stops) {\n      stop.distance = this.calculateDistance(stop, location);\n    }\n\n    stops.sort((a, b) => {\n      if (a.distance === undefined || b.distance === undefined) {\n        return 0;\n      } else {\n        return a.distance - b.distance;\n      }\n    });\n\n    return stops;\n  }\n\n  private calculateDistance(stop: Stop, location: Coordinates) {\n    const lat = location.latitude;\n    const lon = location.longitude;\n\n    return Math.sqrt(Math.pow(stop.lat - lat, 2) + Math.pow(stop.lon - lon, 2));\n  }\n}\n","import React from 'react';\nimport { routeDictionary } from '../../../models/Route';\n\ninterface Route {\n  id: string;\n  name: string;\n}\n\ninterface Props {\n  routeId: string;\n  routes: Route[];\n  etasByRoute: routeDictionary;\n}\n\nexport const RouteDetails = (props: Props) => {\n  return (\n    <div>\n      <h3 className=\"routeName\">{getRouteName(props.routeId, props.routes)}</h3>\n      {Object.values(props.etasByRoute[props.routeId]).map(\n        (eta: any, i: number) => {\n          return (\n            <h4 className=\"routeStatus\" key={i}>\n              {eta} minutes until next bus\n            </h4>\n          );\n        }\n      )}\n    </div>\n  );\n};\n\nfunction getRouteName(routeId: string, routes: any): String {\n  for (const route of routes) {\n    if (route.id === routeId) {\n      return route.name;\n    }\n  }\n  return 'Unknown Route';\n}\n","import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { RouteDetails } from './route/RouteDetails';\nimport { routeDictionary } from '../../models/Route';\nimport Stop from '../../models/Stop';\nimport './Card.scss';\n\ninterface Props {\n  stop: Stop;\n}\n\nconst ETAROUTES = gql`\n  query getEtas($stop: Int) {\n    etas(stop: $stop) {\n      route\n      avg\n      bus_id\n    }\n    routes {\n      id\n      name\n    }\n  }\n`;\n\nexport const Card = (props: Props) => {\n  let defaultEtas: routeDictionary = {};\n  const [etasByRoute, setEtasByRoute] = useState(defaultEtas);\n\n  const { loading, error, data } = useQuery(ETAROUTES, {\n    variables: { stop: Number(props.stop.id) }\n  });\n\n  useEffect(() => {\n    if (data === undefined) {\n      return;\n    }\n\n    const combinedEtas: routeDictionary = {};\n\n    for (const eta of data.etas) {\n      if (eta.route in combinedEtas) {\n        combinedEtas[eta.route].push(eta.avg);\n      } else {\n        combinedEtas[eta.route] = [eta.avg];\n      }\n    }\n\n    setEtasByRoute(combinedEtas);\n  }, [props.stop, data]);\n\n  if (loading) return <div></div>;\n  else if (error) return <div></div>;\n\n  return (\n    <div className=\"card\">\n      <div className=\"accentLine\"></div>\n      <h2 className=\"busStopText\">{props.stop.name}</h2>\n      {Object.keys(etasByRoute).map((route: string, i: number) => {\n        return (\n          <div className=\"routeDetails\" key={i}>\n            <RouteDetails\n              routeId={route}\n              routes={data.routes}\n              etasByRoute={etasByRoute}\n            ></RouteDetails>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { LocationService } from '../../services/LocationService';\nimport { Card } from '../card/Card';\nimport Stop from '../../models/Stop';\nimport './CardList.scss';\n\nconst STOPS = gql`\n  {\n    activeStops {\n      id\n      name\n      lat\n      lon\n    }\n  }\n`;\n\nexport const CardList = () => {\n  const [nearbyStops, setNearbyStops] = useState<Stop[]>([]);\n  const { loading, error, data } = useQuery(STOPS);\n\n  const locationService = new LocationService();\n\n  useEffect(() => {\n    async function determineNearbyStops() {\n      setNearbyStops(\n        await locationService.determineNearbyStops(data.activeStops)\n      );\n    }\n\n    if (data !== undefined) {\n      determineNearbyStops();\n    }\n  });\n\n  if (loading) return <div></div>;\n  else if (error) return <div></div>;\n\n  return (\n    <div>\n      {nearbyStops.slice(0, 5).map((stop: Stop, i: number) => {\n        return (\n          <div className=\"card\" key={i}>\n            <Card stop={stop}></Card>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from 'react';\nimport { CardList } from '../cardList/CardList';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport accentBars from '../../assets/accentBars.svg';\nimport './App.scss';\n\nconst client = new ApolloClient({\n  uri: 'https://mbusql.azurewebsites.net/graphql'\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"app\">\n        <img src={accentBars} className=\"accentBars topBars\" alt=\"\" />\n        <header>\n          <h1 className=\"title\">MBus</h1>\n        </header>\n        <div className=\"cardList\">\n          <CardList></CardList>\n        </div>\n        <img src={accentBars} className=\"accentBars bottomBars\" alt=\"\" />\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}